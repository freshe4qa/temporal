syntax = "proto3";

package temporal.compound;

import "temporal/compound/compound_setting.proto";
import "temporal/compound/validator_setting.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/temporal-zone/temporal/x/compound/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateCompoundSetting (MsgCreateCompoundSetting) returns (MsgCreateCompoundSettingResponse);
  rpc UpdateCompoundSetting (MsgUpdateCompoundSetting) returns (MsgUpdateCompoundSettingResponse);
  rpc DeleteCompoundSetting (MsgDeleteCompoundSetting) returns (MsgDeleteCompoundSettingResponse);
}
message MsgCreateCompoundSetting {
  string                    delegator        = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated ValidatorSetting validatorSetting = 2;
  cosmos.base.v1beta1.Coin  amountToRemain   = 3 [(gogoproto.nullable) = false];
  uint64                    frequency        = 4;
}

message MsgCreateCompoundSettingResponse {}

message MsgUpdateCompoundSetting {
  string                    delegator        = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated ValidatorSetting validatorSetting = 2;
  cosmos.base.v1beta1.Coin  amountToRemain   = 3 [(gogoproto.nullable) = false];
  uint64                     frequency        = 4;
}

message MsgUpdateCompoundSettingResponse {}

message MsgDeleteCompoundSetting {
  string delegator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgDeleteCompoundSettingResponse {}

